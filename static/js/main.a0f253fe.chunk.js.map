{"version":3,"sources":["Circle.js","circles.js","GameOver.js","App.js","index.js"],"names":["Circle","props","style","backgroundColor","color","pointerEvents","disabled","className","active","onClick","click","circles","id","GameOver","close","score","getRndInteger","min","max","Math","floor","random","App","state","current","gameOver","pace","rounds","gameStart","gameStop","timer","undefined","clickHandler","console","log","setState","stopHandler","nextcircle","nextActive","setTimeout","startHandler","clearTimeout","closeHandler","this","map","c","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAceA,EAZA,SAACC,GACZ,OAEI,aADA,CACA,OACAC,MAAO,CAACC,gBAAgBF,EAAMG,MAC9BC,cAAcJ,EAAMK,SAAW,OAAS,QACxCC,UAAS,kBAAaN,EAAMO,OAAQ,SAAW,IAC/CC,QAASR,EAAMS,SCTVC,EAAU,CACnB,CAACC,GAAG,EAAER,MAAM,SACZ,CAACQ,GAAG,EAAER,MAAM,QACZ,CAACQ,GAAG,EAAER,MAAM,UACZ,CAACQ,GAAG,EAAER,MAAM,QCaDS,EAdE,SAACZ,GAEd,OACI,qBAAKM,UAAU,UAAf,SACI,sBAAKA,UAAU,QAAf,UACA,wBAAQE,QAASR,EAAMa,MAAvB,SAA8B,uCAC9B,2CACA,kDAAqBb,EAAMc,eCCjCC,EAAgB,SAACC,EAAKC,GAC1B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAOA,GAGlDK,E,4MACJC,MAAM,CACJR,MAAO,EACPS,QAAQ,EACRC,UAAS,EACTC,KAAM,KACNC,OAAO,EACPC,WAAW,EACXC,UAAU,G,EAEZC,WAAQC,E,EAGRC,aAAe,SAACpB,GACdqB,QAAQC,IAAItB,GAET,EAAKW,MAAMC,UAAYZ,EAI1B,EAAKuB,SAAS,CACZpB,MAAM,EAAKQ,MAAMR,MAAQ,GACzBY,OAAQ,IALR,EAAKS,e,EASTC,WAAa,WACX,GAAG,EAAKd,MAAMI,QAAU,EACtB,EAAKS,kBADP,CAIA,IAAIE,EACJ,GACEA,EAAatB,EAAc,EAAE,SACxBsB,IAAe,EAAKf,MAAMC,SACjC,EAAKW,SAAS,CACZX,QAAUc,EACVZ,KAAuB,IAAlB,EAAKH,MAAMG,KAChBC,OAAQ,EAAKJ,MAAMI,OAAS,IAG9B,EAAKG,MAAQS,WAAW,EAAKF,WAAY,EAAKd,MAAMG,MACpDO,QAAQC,IAAI,sBAAuB,EAAKX,MAAMC,SAC9CS,QAAQC,IAAI,mBAAmB,EAAKX,MAAMI,U,EAE5Ca,aAAe,WACb,EAAKH,aACL,EAAKF,SAAS,CACZP,WAAW,EACXC,UAAU,K,EAGdO,YAAc,WACZK,aAAa,EAAKX,OAClB,EAAKK,SAAS,CACZV,UAAS,EACTD,QAAQ,EACRE,KAAM,KACNE,WAAW,EACXC,UAAU,K,EAGda,aAAe,WACb,EAAKP,SAAS,CACZV,UAAS,EACTV,MAAO,EACPW,KAAM,KACNC,OAAQ,K,4CAGZ,WAAU,IAAD,OAEP,OACI,sBAAKpB,UAAU,MAAf,UACA,2CACA,sDAAyBoC,KAAKpB,MAAMR,SACpC,qBAAKR,UAAU,UAAf,SACGI,EAAQiC,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,CAEAzC,MAAOyC,EAAEzC,MACTQ,GAAIiC,EAAEjC,GACNF,MAAO,kBAAK,EAAKsB,aAAaa,EAAEjC,KAChCJ,OAAS,EAAKe,MAAMC,UAAYqB,EAAEjC,GAClCN,SAAU,EAAKiB,MAAMK,WALhBiB,EAAEjC,SAQX,sBAAKL,UAAU,SAAf,UACA,wBACAD,SAAWqC,KAAKpB,MAAMK,UACtBrB,UAAU,QACVE,QAASkC,KAAKH,aAHd,SAIC,2CAED,wBACAlC,SAAUqC,KAAKpB,MAAMM,SACrBtB,UAAU,OACVE,QAASkC,KAAKP,YAHd,SAIC,0CAEAO,KAAKpB,MAAME,UAAY,cAAC,EAAD,CAAUV,MAAO4B,KAAKpB,MAAMR,MAAOD,MAAO6B,KAAKD,yB,GApG7DI,aA4GHxB,ICrHfyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a0f253fe.chunk.js","sourcesContent":["import React from 'react';\n\nconst Circle = (props) => {\n    return (\n        // <div className={`circle ${props.color}`}><p>{props.id} </p>\n        <div \n        style={{backgroundColor:props.color,\n        pointerEvents:props.disabled ? \"auto\" : \"none\"}} \n        className={` circle ${props.active? \"active\" : \"\"}`} \n        onClick={props.click}>\n        </div>\n    );\n};\n\nexport default Circle;","export const circles = [\n    {id:1,color:\"green\"},\n    {id:2,color:\"blue\"},\n    {id:3,color:\"yellow\"},\n    {id:4,color:\"red\"}\n]","import React from 'react';\n\n\nconst GameOver = (props) => {\n   \n    return (\n        <div className=\"overlay\">\n            <div className=\"popup\">\n            <button onClick={props.close}><span>X</span></button>\n            <h2>Game over</h2>\n            <p>Your score was : {props.score}</p>\n            </div>\n            \n        </div>\n    );\n};\n\nexport default GameOver;","\nimport React, { Component } from 'react';\nimport './App.css'\nimport Circle from './Circle';\nimport {circles} from './circles'\nimport GameOver from './GameOver';\n// import endSound from \"./assets/\"\n\n// let gameEndsound = new Audio(endSound);\n\n\nconst getRndInteger = (min, max) =>{\n  return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\nclass App extends Component {\n  state={\n    score: 0 ,\n    current:0,\n    gameOver:false,\n    pace: 1500,\n    rounds:0,\n    gameStart: false,\n    gameStop: true,\n  }\n  timer = undefined;\n  \n\n  clickHandler = (id) =>{\n    console.log(id);\n    \n    if(this.state.current !== id){\n      this.stopHandler();\n      return;\n    }\n    this.setState({\n      score:this.state.score + 10,\n      rounds: 0,\n    })\n  }\n\n  nextcircle = () =>{\n    if(this.state.rounds >= 5){\n      this.stopHandler();\n      return;\n    }\n    let nextActive;\n    do{\n      nextActive = getRndInteger(1,4)\n    }while(nextActive === this.state.current)\n    this.setState({\n      current : nextActive,\n      pace:this.state.pace * 0.95,\n      rounds: this.state.rounds + 1\n    });\n    \n    this.timer = setTimeout(this.nextcircle, this.state.pace);\n    console.log(\"active circle is : \", this.state.current)\n    console.log('round number is:',this.state.rounds)\n  }\n  startHandler = () =>{\n    this.nextcircle();\n    this.setState({\n      gameStart: true,\n      gameStop: false,\n    })\n  }\n  stopHandler = () =>{\n    clearTimeout(this.timer);\n    this.setState({\n      gameOver:true,\n      current:0,\n      pace: 1500,\n      gameStart: false,\n      gameStop: true,\n    })\n  };\n  closeHandler = () =>{\n    this.setState({\n      gameOver:false,\n      score: 0,\n      pace: 1500,\n      rounds: 0,\n    })\n  }\n  render() {\n\n    return (\n        <div className=\"App\">\n        <h1>Speedgame</h1>\n        <p>Your game score is : {this.state.score}</p>\n        <div className=\"circles\">\n          {circles.map((c) => (\n            <Circle \n            key={c.id} \n            color={c.color} \n            id={c.id} \n            click={() =>this.clickHandler(c.id)}\n            active= {this.state.current === c.id}\n            disabled={this.state.gameStart}/> \n          ))}\n        </div>\n        <div className=\"button\">\n        <button  \n        disabled= {this.state.gameStart} \n        className=\"start\" \n        onClick={this.startHandler}\n        ><span>Start</span>\n        </button>\n        <button \n        disabled={this.state.gameStop}\n        className=\"stop\" \n        onClick={this.stopHandler}\n        ><span>Stop</span>\n        </button>\n        {this.state.gameOver && <GameOver score={this.state.score} close={this.closeHandler} />}\n        </div>\n    </div>\n      \n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}